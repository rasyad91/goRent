package handler

import (
	"encoding/json"
	"fmt"
	"goRent/internal/model"
	"goRent/internal/render"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
)

func (m *Repository) Search(w http.ResponseWriter, r *http.Request) {

	// m.CreateProductList()

	if err := render.Template(w, r, "home.page.html", &render.TemplateData{
		Data: nil,
	}); err != nil {
		m.App.Error.Println(err)
	}

}

func (m *Repository) SearchResult(w http.ResponseWriter, r *http.Request) {
	var data = make(map[string]interface{})
	var product []model.Product
	var urlquery string
	x := r.URL.Query()
	fmt.Println(x)

	type Autogenerated struct {
		Took     int  `json:"took"`
		TimedOut bool `json:"timed_out"`
		Shards   struct {
			Total      int `json:"total"`
			Successful int `json:"successful"`
			Skipped    int `json:"skipped"`
			Failed     int `json:"failed"`
		} `json:"_shards"`
		Hits struct {
			Total struct {
				Value    int    `json:"value"`
				Relation string `json:"relation"`
			} `json:"total"`
			MaxScore float64 `json:"max_score"`
			Hits     []struct {
				Index  string  `json:"_index"`
				Type   string  `json:"_type"`
				ID     string  `json:"_id"`
				Score  float64 `json:"_score"`
				Source struct {
					ID          string `json:"ID"`
					OwnerID     string `json:"owner_id"`
					Brand       string `json:"brand"`
					Title       string `json:"title"`
					Rating      string `json:"rating"`
					Description string `json:"description"`
					Price       string `json:"price"`
					Image1      string `json:"img1_url"`
					CreateAt    string `json:"create_at"`
					UpdatedAt   string `json:"updated_at"`
				} `json:"_source"`
			} `json:"hits"`
		} `json:"hits"`
	}

	searchkeywords := url.QueryEscape(x["q"][0])

	if len(searchkeywords) == 0 {
		urlquery = `https://search-woo-team-z5lx6ctesbpbgigbrkqcirk2om.ap-southeast-1.es.amazonaws.com/product_list/_search?`
	} else {
		urlquery = `https://search-woo-team-z5lx6ctesbpbgigbrkqcirk2om.ap-southeast-1.es.amazonaws.com/product_list/_search?q=` + searchkeywords
	}

	response, err := http.Get(urlquery)

	if err != nil {
		fmt.Printf("The HTTP request failed with error %s \n", err)
	} else {
		fmt.Println(urlquery)
		dataResponse, _ := ioutil.ReadAll(response.Body)
		fmt.Println("[GET] request fired from search result route:", response.StatusCode)
		response.Body.Close()

		if response.StatusCode == 200 {

			// fmt.Println(string(data))
			var p Autogenerated
			err = json.Unmarshal(dataResponse, &p)
			if err != nil {
				fmt.Println("error processing json files")
			}

			if p.Hits.Total.Value == 0 {
				//no results found, do something
				fmt.Println("no results found at all")
			} else {
				fmt.Println("total number of results", p.Hits.Total.Value)
				//local product struct first before switiching to global stuct

				for _, v := range p.Hits.Hits {

					productID, err_productiD := strconv.Atoi(v.Source.ID)
					if err_productiD != nil {
						m.App.Error.Println(err_productiD)
					}

					productOwnerID, err_productOwnerID := strconv.Atoi((v.Source.OwnerID))
					if err_productOwnerID != nil {
						m.App.Error.Println(err_productOwnerID)
					}

					productRating, err_productRating := strconv.ParseFloat(v.Source.Rating, 32)
					if err_productRating != nil {
						m.App.Error.Println(err_productRating)
					}
					productPrice, err_productPrice := strconv.ParseFloat(v.Source.Price, 32)
					if err_productPrice != nil {
						m.App.Error.Println(err_productPrice)
					}

					var jsonImage = []string{v.Source.Image1}

					product = append(product, model.Product{ID: productID, OwnerID: productOwnerID, Brand: v.Source.Brand, Title: v.Source.Title,
						Rating: float32(productRating), Description: v.Source.Description, Price: float32(productPrice), Images: jsonImage})

					fmt.Println("this is jsonImage", jsonImage)

					// fmt.Println(p.Hits.Hits)

				}
				for _, v := range product {
					fmt.Println("This is the product title", v.Title)
					fmt.Println("This is the product brand", v.Brand)
					fmt.Println("This is the product description", v.Description)
					fmt.Println("This is the product price", v.Price)
					fmt.Println("This is the product rating", v.Rating)
					fmt.Println("---- ---- ----")
					fmt.Println("this is the product image link", v.Images)
				}

			}

		} else {
			fmt.Println("get request failed")
			fmt.Println(string(dataResponse))
		}

	}

	data["product"] = product
	// m.CreateProductList()

	// if r.Method == http.MethodPost {
	// 	searchKW := r.FormValue("searchtext")

	// 	sr := html.EscapeString(searchKW)
	// 	srtL := strings.ToLower((sr))
	// 	_ = srtL

	fmt.Println("printing of map interfacre", data)

	// 	//can we store this value into middleware so the value can be passed to the next page?

	// 	http.Redirect(w, r, "/searchresult", http.StatusSeeOther)
	// }

	if err := render.Template(w, r, "searchresult.page.html", &render.TemplateData{
		Data: data,
	}); err != nil {
		m.App.Error.Println(err)
	}

}
